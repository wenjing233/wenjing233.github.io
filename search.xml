<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>luogu P1155 双栈排序</title>
      <link href="/2019/03/20/luogu-p1155-shuang-zhan-pai-xu/"/>
      <url>/2019/03/20/luogu-p1155-shuang-zhan-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="骗分"><a href="#骗分" class="headerlink" title="骗分"></a>骗分</h3><p>首先看到这道题我最先想到的是模拟<br>但问题是其要求字典序最小，这就很麻烦了<br>假设这个条件没有（也就是假装数据很弱去骗分）<br>首先对于一个数，他只能加入空栈或栈顶的数比这个数大的栈<br>为了经可能有解，每次都加入栈顶数最小的栈<br>也就是说将空栈先加入一个极大值<br>然后模拟即可得到50分</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> tot<span class="token operator">=</span>tot<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tot<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> now<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> sta1<span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sta2<span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>top1<span class="token punctuation">,</span>top2<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token keyword">char</span> ans<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> lenans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sta1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2000000000</span><span class="token punctuation">,</span>sta2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2000000000</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>ls<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ls<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ls<span class="token operator">==</span>now<span class="token punctuation">)</span> now<span class="token operator">++</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span><span class="token operator">++</span>lenans<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span><span class="token operator">++</span>lenans<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ls<span class="token operator">&lt;</span>sta1<span class="token punctuation">[</span>top1<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>ls<span class="token operator">&lt;</span>sta2<span class="token punctuation">[</span>top2<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sta1<span class="token punctuation">[</span>top1<span class="token punctuation">]</span><span class="token operator">&lt;=</span>sta2<span class="token punctuation">[</span>top2<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    sta1<span class="token punctuation">[</span><span class="token operator">++</span>top1<span class="token punctuation">]</span><span class="token operator">=</span>ls<span class="token punctuation">;</span>                    ans<span class="token punctuation">[</span><span class="token operator">++</span>lenans<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    sta2<span class="token punctuation">[</span><span class="token operator">++</span>top2<span class="token punctuation">]</span><span class="token operator">=</span>ls<span class="token punctuation">;</span>                    ans<span class="token punctuation">[</span><span class="token operator">++</span>lenans<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'c'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ls<span class="token operator">&lt;</span>sta1<span class="token punctuation">[</span>top1<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                sta1<span class="token punctuation">[</span><span class="token operator">++</span>top1<span class="token punctuation">]</span><span class="token operator">=</span>ls<span class="token punctuation">;</span>                ans<span class="token punctuation">[</span><span class="token operator">++</span>lenans<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ls<span class="token operator">&lt;</span>sta2<span class="token punctuation">[</span>top2<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                sta2<span class="token punctuation">[</span><span class="token operator">++</span>top2<span class="token punctuation">]</span><span class="token operator">=</span>ls<span class="token punctuation">;</span>                ans<span class="token punctuation">[</span><span class="token operator">++</span>lenans<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'c'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>sta1<span class="token punctuation">[</span>top1<span class="token punctuation">]</span><span class="token operator">==</span>now<span class="token operator">||</span>sta2<span class="token punctuation">[</span>top2<span class="token punctuation">]</span><span class="token operator">==</span>now<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sta1<span class="token punctuation">[</span>top1<span class="token punctuation">]</span><span class="token operator">==</span>now<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ans<span class="token punctuation">[</span><span class="token operator">++</span>lenans<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">;</span>                top1<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                ans<span class="token punctuation">[</span><span class="token operator">++</span>lenans<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'d'</span><span class="token punctuation">;</span>                    top2<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            now<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>lenans<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实际上也可以加入随机化来加强骗分（在有两个选择的情况下，小概率无脑选1）</p><h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><p>如果a[i],a[j]两个数不在同一个栈中，则必定存在i&lt;j&lt;k且a[k]&lt;a[i]&lt;a[j]<br>暴力枚举为O(n^3)<br>考虑消去k这一纬<br>枚举k的意义就是找到在j后面且比j小的数<br>那么只要维护后缀最大值就行了<br>然后无解的情况就是 a不和b一起<br>但c不和b一起也不和a一起<br>就至少需要三个栈了（所以说这道题可以改编成问至少要有几个栈）<br>ok那我们就可进行染色看是否存在颜色冲突即可（优先染成一号栈的颜色）<br>然后既然颜色已知，按照骗分的方法模拟即可</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> tot<span class="token operator">=</span>tot<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tot<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> sta1<span class="token punctuation">[</span><span class="token number">10009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sta2<span class="token punctuation">[</span><span class="token number">10009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> top1<span class="token punctuation">,</span>top2<span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nt<span class="token punctuation">[</span><span class="token number">200009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>to<span class="token punctuation">[</span><span class="token number">200009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bh<span class="token punctuation">;</span><span class="token keyword">int</span> tot<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> color<span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> mark<span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    bh<span class="token operator">++</span><span class="token punctuation">;</span>    to<span class="token punctuation">[</span>bh<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span>    nt<span class="token punctuation">[</span>bh<span class="token punctuation">]</span><span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>bh<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    color<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> now<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> nt<span class="token operator">=</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>nt<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                color<span class="token punctuation">[</span>nt<span class="token punctuation">]</span><span class="token operator">=</span>color<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>nt<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    f<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2000000000</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>f<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">add</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sta1<span class="token punctuation">[</span><span class="token operator">++</span>top1<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            sta2<span class="token punctuation">[</span><span class="token operator">++</span>top2<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>sta1<span class="token punctuation">[</span>top1<span class="token punctuation">]</span><span class="token operator">==</span>tot<span class="token operator">||</span>sta2<span class="token punctuation">[</span>top2<span class="token punctuation">]</span><span class="token operator">==</span>tot<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sta1<span class="token punctuation">[</span>top1<span class="token punctuation">]</span><span class="token operator">==</span>tot<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                top1<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"d "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                top2<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tot<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> luogu </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 3 18 杭师大ACM游记</title>
      <link href="/2019/03/18/2019-3-18-hang-shi-da-acm-you-ji/"/>
      <url>/2019/03/18/2019-3-18-hang-shi-da-acm-you-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="杭师大ACM总结"><a href="#杭师大ACM总结" class="headerlink" title="杭师大ACM总结"></a>杭师大ACM总结</h3><h1 id="只有两个人打个球球啊"><a href="#只有两个人打个球球啊" class="headerlink" title="只有两个人打个球球啊"></a>只有两个人打个球球啊</h1><p>因为只有两个人所以题都没开完，题目翻译比别的组慢了不知道多少，讨论聪明题的时候也少一张口胡爷的嘴巴</p><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>水题，字符串输入<br><del>然而我getchar搞了半小时也没对，然后gets（）一发过了</del></p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>最喜欢的一题 问在一个区间里能不能找到三个数满足a+b&gt;c<br>也就是说如果要一直不满足就要使序列满足a+b&lt;=c<br>也就是极端情况就是一个从1 1开始的斐波那契数列<br>但斐波那契到了60多项就是非常大了，所以区间在60以内暴力判<br>60以上直接”YES”</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> tot<span class="token operator">=</span>tot<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tot<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span><span class="token number">500009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>q<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> iii<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>iii<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span>iii<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        l<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token operator">||</span>l<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>r<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">&lt;=</span><span class="token number">60</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">bool</span> kx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">long</span> <span class="token keyword">long</span> ls1<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ls2<span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>ls3<span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>ls1<span class="token operator">></span>ls2<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>ls1<span class="token punctuation">,</span>ls2<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>ls1<span class="token operator">></span>ls3<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>ls1<span class="token punctuation">,</span>ls3<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>ls2<span class="token operator">></span>ls3<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>ls2<span class="token punctuation">,</span>ls3<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>ls1<span class="token operator">+</span>ls2<span class="token operator">></span>ls3<span class="token punctuation">)</span> kx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>kx<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>题意:对所有数异或 与 或 一些数<br>然后求区间第k大<br>一看就知道是可持久化数据结构（然而我只会主席树）<br>正解是可持久化01树异或直接暴力重构<br>我也不知道怎么写 过</p><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>问数列里有几个不同的数字<br>水题，过</p><h3 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h3><p>从0出发，每次只能跳到(i<em>2)%n或者(i</em>2+1)%n，求字典序最大的汉密尔顿回路。<br>显然汉密尔顿回路需要状压 这里n太大不合适<br>首先n为奇数时绝对无解（为什么）<br>因为在奇数的情况下，只有(n-1)/2能与n-1和0连边也就是说(n-1)/2这个点要经过两次，不成立<br>当n是偶数，可以发现i和i+n/2的出边完全相同。<br>我们把i和i+n/2合并，得到一张n/2个点的图，所有点都需要两条入边和两条出边——欧拉回路！<br>于是只需要跑出欧拉回路就能对应到原问题了，介于欧拉回路算法的性质，贪心走较大的边即可保证字典序最大。</p><h3 id="T6"><a href="#T6" class="headerlink" title="T6"></a>T6</h3><p>搞不懂 告辞</p><h3 id="T7"><a href="#T7" class="headerlink" title="T7"></a>T7</h3><p>你有一个钱罐子，每天放进去的钱是不降的，如果在第k天时，你恰好有a[k]元，则可以选择将钱罐子清空然后获得v[k]的贡献值<br>显然选择一个罐子时你放入的钱要尽可能少，则将钱分平均（上取整）<br>然后当你选择的商品为k1,k2,k3……kn时<br>必然满足a[ki]/(ki-ki-1)&lt;=a[ki-1]/(ki-1-ki-2) （上去整）<br>令f[i][j]表示最后购买的两个物品为i和j，则f[i][j]=max(f[j][k]+v[i]) (j-&gt;k-&gt;i合法)<br>这样枚举需要多一个k<br>已知两个不等式三个未知数，显然可以表示1个<br>于是我们得到k&gt;=j-(i-j)*a[j]/a[i]<br>也就是可选取的k在一个区间内，而且是一直到结尾的，所以直接把v[i]扔出去<br>设s[j][k]为f[j][k..j]的最大值（因为满足决策单调性）<br>那么max就被去掉了</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//不知道为什么错了。。。</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> tot<span class="token operator">=</span>tot<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tot<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">2009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">2009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">2009</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">2009</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>k<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            k<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">*</span>w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="T8"><a href="#T8" class="headerlink" title="T8"></a>T8</h3><p>问对于每个i<br>ai^aj&gt;aj^ai的组数有多少<br>我在考场愉快的得到一个式子<br>ylnx &gt; xlny<br>然后我竟然傻了去找规律！<br>论三个人的好处都有啥？<br>移一下项就可以得到y/lny &gt; x/lnx<br>哇，那排序不就好了嘛<br><del>今天的wenjing233死于精度误差</del><br>我们考虑y=x/lnx的单调性<br>对其求导（我不会，实际上我打表找到的规律似乎与这个差不多，但似乎我不小心把4给特判错了，实际上4是普遍性的）<del>(无端迫害米4达，自裁，请）</del><br>补个图<img src="https://i.loli.net/2019/03/18/5c8f46c017a54.png" alt><br>也就是2等价于4<br>2^4=4^2<br>以及1视为无限小<br>也就是说把2变成4然后排序，去重并记录个数就好了</p><h3 id="T9"><a href="#T9" class="headerlink" title="T9"></a>T9</h3><p>感谢xyc大佬对本题的贡献<br>题意是给定明文和秘文，明文字母表与秘文字母表一一对应<br>问有哪些明文字母与密文字母对应关系已知或输出不可能<br>坑点在于，已知25组关系下，第26组是知道的！！！</p><h3 id="T10"><a href="#T10" class="headerlink" title="T10"></a>T10</h3><p>傻逼题，题意都不想说</p><h3 id="T11"><a href="#T11" class="headerlink" title="T11"></a>T11</h3><p>水题<del>干他妈的徐元程</del><br>给出一些点问面积在l——r之间的三角形有多少<br>本来已经想出来就是把所有三角形算出来然后排序二分就完美了，结果xyc硬说1e7排序超时<br>然后我就从对n立方级别的排序拆成n个n方排序（也就是对于每个点进行储存）这样就省了一个log（n）,但是这样会多一个6因为三角形重复计数</p><h3 id="T12"><a href="#T12" class="headerlink" title="T12"></a>T12</h3><p>开都没开。。。<br>不想订正了。。。</p><h3 id="T13"><a href="#T13" class="headerlink" title="T13"></a>T13</h3><p>这个要挖坑，先把PPT的东西搬过来<br>SG函数还是要好好学学的</p><pre class=" language-cpp"><code class="language-cpp">题意：石子游戏，要不取一堆，要不取x个且<span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>该堆石子个数<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span>，问谁会赢。题解：显然符合NIM游戏，只要能算出sg函数值即可判断。    打表寻找规律，可以发现当x为质数时，sg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>x是第几个质数<span class="token operator">+</span><span class="token number">1</span>。                当x不为质数时，sg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>sg<span class="token punctuation">[</span>p<span class="token punctuation">]</span>且p是x的最小质因子。    写一个类似线性筛的循环即可，线性筛保证每个数字都是被最小质因子筛到。</code></pre><p>让人自行思考的出题人是人间之屑（暴论）</p><h1 id="完结扬出题人骨灰（大误）"><a href="#完结扬出题人骨灰（大误）" class="headerlink" title="完结扬出题人骨灰（大误）"></a>完结扬出题人骨灰（大误）</h1><p>也就是说要补的代码有T 2 5 7 8 11</p><h1 id="不想补了。。。有缘再相见吧。。。"><a href="#不想补了。。。有缘再相见吧。。。" class="headerlink" title="不想补了。。。有缘再相见吧。。。"></a>不想补了。。。有缘再相见吧。。。</h1>]]></content>
      
      
      <categories>
          
          <category> 生活记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游记 </tag>
            
            <tag> 题解 </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P4374 【[USACO18OPEN]Disruption】</title>
      <link href="/2019/03/04/ti-jie-p4374-usaco18open-disruption/"/>
      <url>/2019/03/04/ti-jie-p4374-usaco18open-disruption/</url>
      
        <content type="html"><![CDATA[<p>既然没有有图的题解，那我就过来补个图加思路了</p><h3 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h3><p>假设我们有一颗树<br><img src="https://i.loli.net/2019/03/06/5c7f0e0adb762.png" alt><br>现在多了一条额外道路<br><img src="https://i.loli.net/2019/03/06/5c7f0e497d85c.png" alt><br>则当且仅当额外道路所连的两个点不在一个联通块内时，这条边才有贡献，我们将能够将这两个点分开的边标记出来<br><img src="https://i.loli.net/2019/03/06/5c7f0d7dd41c9.png" alt><br>发现这些边构成的路径就是两点之间的最短简单路径，直接用树剖维护区间极值即可<br>（不要问我前两张图为什么那么怪，因为我是由结果改出过程（简称懒））</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>两点不在同一个联通快内，即两点之间不存在简单路径，因为这是一棵树，所以两点之间的简单路径是唯一的，只有切断简单路径才能使两个点不在一个联通块内，证毕</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">50009</span><span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>to<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nt<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> gzw<span class="token punctuation">{</span>    <span class="token keyword">int</span> st<span class="token punctuation">,</span>ed<span class="token punctuation">,</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span>way<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>bh<span class="token punctuation">,</span>totid<span class="token punctuation">;</span><span class="token keyword">int</span> top<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>siz<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>mxson<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>fa<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>dep<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>id<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> u<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> val<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tag<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">rnk</span><span class="token punctuation">(</span>gzw a<span class="token punctuation">,</span>gzw b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>val<span class="token operator">></span>b<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    bh<span class="token operator">++</span><span class="token punctuation">;</span>    nt<span class="token punctuation">[</span>bh<span class="token punctuation">]</span><span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>bh<span class="token punctuation">;</span>    to<span class="token punctuation">[</span>bh<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> fath<span class="token punctuation">,</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span><span class="token punctuation">{</span>    fa<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span>fath<span class="token punctuation">;</span>    dep<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span>depth<span class="token punctuation">;</span>    siz<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span>mx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fath<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">dfs1</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>now<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            siz<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>siz<span class="token punctuation">[</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>siz<span class="token punctuation">[</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span>mx<span class="token punctuation">)</span> mx<span class="token operator">=</span>siz<span class="token punctuation">[</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mxson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> tp<span class="token punctuation">)</span><span class="token punctuation">{</span>    id<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>totid<span class="token punctuation">;</span>    top<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span>tp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mxson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">dfs2</span><span class="token punctuation">(</span>mxson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fa<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>mxson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;now&lt;&lt;" "&lt;&lt;to[i]&lt;&lt;endl;</span>            <span class="token function">dfs2</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">upd</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">?</span>k<span class="token operator">:</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tag<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">upd</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span>tag<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">upd</span><span class="token punctuation">(</span>tag<span class="token punctuation">[</span>now<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tag<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">upd</span><span class="token punctuation">(</span>tag<span class="token punctuation">[</span>now<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tag<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tag<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;" "&lt;&lt;pos&lt;&lt;endl;</span>    <span class="token function">pushdown</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>pos<span class="token operator">&amp;&amp;</span>r<span class="token operator">==</span>pos<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> val<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>pos<span class="token punctuation">)</span> <span class="token function">query</span><span class="token punctuation">(</span>now<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">query</span><span class="token punctuation">(</span>now<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> ql<span class="token punctuation">,</span><span class="token keyword">int</span> qr<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">pushdown</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>qr<span class="token operator">>=</span>r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;now&lt;&lt;" "&lt;&lt;ql&lt;&lt;" "&lt;&lt;qr&lt;&lt;" "&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;" 666"&lt;&lt;endl;</span>        <span class="token function">upd</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">upd</span><span class="token punctuation">(</span>tag<span class="token punctuation">[</span>now<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">upd</span><span class="token punctuation">(</span>tag<span class="token punctuation">[</span>now<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>qr<span class="token punctuation">)</span> <span class="token function">change</span><span class="token punctuation">(</span>now<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>ql<span class="token punctuation">)</span> <span class="token function">change</span><span class="token punctuation">(</span>now<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">change</span><span class="token punctuation">(</span>now<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">change</span><span class="token punctuation">(</span>now<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> tx<span class="token operator">=</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>ty<span class="token operator">=</span>top<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tx<span class="token operator">!=</span>ty<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token operator">&lt;</span>dep<span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">swap</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;id[tx]&lt;&lt;" "&lt;&lt;id[x]&lt;&lt;" "&lt;&lt;k&lt;&lt;" 233"&lt;&lt;endl;</span>        <span class="token function">change</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>id<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">,</span>id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token operator">=</span>fa<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">,</span>tx<span class="token operator">=</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>y<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">></span>id<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;id[x]+1&lt;&lt;" "&lt;&lt;id[y]&lt;&lt;" "&lt;&lt;k&lt;&lt;" 233"&lt;&lt;endl;</span>        <span class="token function">change</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>id<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//???</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">bl</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">pushdown</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//cout&lt;&lt;now&lt;&lt;" "&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;" "&lt;&lt;val[now]&lt;&lt;endl;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">bl</span><span class="token punctuation">(</span>now<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bl</span><span class="token punctuation">(</span>now<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st<span class="token punctuation">,</span><span class="token operator">&amp;</span>way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ed<span class="token punctuation">,</span><span class="token operator">&amp;</span>way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>way<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>way<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>rnk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">C</span><span class="token punctuation">(</span>way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st<span class="token punctuation">,</span>way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ed<span class="token punctuation">,</span>way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//bl(1,1,n);</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;endl;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>ls<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;(dep[u[i]]>dep[v[i]]?id[u[i]]:id[v[i]])&lt;&lt;" "&lt;&lt;666&lt;&lt;endl;</span>        ls<span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span>dep<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">?</span>id<span class="token punctuation">[</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span>id<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ls<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> luogu </tag>
            
            <tag> 图论 </tag>
            
            <tag> 树 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 1328 题解&amp;区间选取问题</title>
      <link href="/2019/03/01/poj-1328-ti-jie-qu-jian-xuan-qu-wen-ti/"/>
      <url>/2019/03/01/poj-1328-ti-jie-qu-jian-xuan-qu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="题意转化"><a href="#题意转化" class="headerlink" title="题意转化"></a>题意转化</h3><p>将题目反过来看，对于每个建筑，能观察到它的检测器要么不存在，要么就存在于一个区间之中，即最后的问题变为区间选取问题</p><h3 id="区间选取问题"><a href="#区间选取问题" class="headerlink" title="区间选取问题"></a>区间选取问题</h3><p>最优策略为将一个点尽可能的向右移动知道达到一个区间的右端点，因为每个区间内至少有一个点，二这个点尽可能往右能覆盖更多的点（前提是这个点没有超过当前所覆盖的区间的任意一个右端点），因为每次离开一个区间，意味着最后还要放回去一个点，显然是不优或等价的。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>c<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">>=</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    x<span class="token operator">*</span><span class="token operator">=</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>radii<span class="token punctuation">;</span><span class="token keyword">struct</span> radar<span class="token punctuation">{</span>    <span class="token keyword">double</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span>r<span class="token punctuation">[</span><span class="token number">1008</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">rmp</span><span class="token punctuation">(</span>radar a<span class="token punctuation">,</span>radar b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>l<span class="token operator">==</span>b<span class="token punctuation">.</span>l<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>r<span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>l<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> fstn<span class="token punctuation">,</span>fstr<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> gg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>radii<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>n<span class="token operator">&amp;&amp;</span>radii<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>gg<span class="token punctuation">)</span> fstn<span class="token operator">=</span>n<span class="token punctuation">,</span>fstr<span class="token operator">=</span>radii<span class="token punctuation">;</span>        <span class="token keyword">int</span> maxy<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token function">read</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            maxy<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxy<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">1.0</span><span class="token operator">-</span><span class="token function">sqrt</span><span class="token punctuation">(</span>radii<span class="token operator">*</span>radii<span class="token operator">-</span>b<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">1.0</span><span class="token operator">+</span><span class="token function">sqrt</span><span class="token punctuation">(</span>radii<span class="token operator">*</span>radii<span class="token operator">-</span>b<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>maxy<span class="token operator">&lt;=</span>radii<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token function">sort</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>rmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> ll<span class="token operator">=</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>rr<span class="token operator">=</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>tot<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>rr<span class="token operator">>=</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&amp;&amp;</span>rr<span class="token operator">&lt;=</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    ll<span class="token operator">=</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>rr<span class="token operator">></span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&amp;&amp;</span>ll<span class="token operator">&lt;=</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    ll<span class="token operator">=</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>                    rr<span class="token operator">=</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    tot<span class="token operator">++</span><span class="token punctuation">;</span>rr<span class="token operator">=</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> tot<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        gg<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fstn<span class="token operator">==</span><span class="token number">3</span><span class="token operator">&amp;&amp;</span>fstr<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %d\n"</span><span class="token punctuation">,</span>gg<span class="token punctuation">,</span>tot<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">else</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>tot<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> poj </tag>
            
            <tag> 平面几何 </tag>
            
            <tag> 问题转化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>均分纸牌(luogu1031)糖果传递(luogu2512)七夕会(bzoj3032)三合一题解</title>
      <link href="/2019/02/28/jun-fen-zhi-pai-luogu1031-tang-guo-chuan-di-luogu2512-qi-xi-hui-bzoj3032-san-he-yi-ti-jie/"/>
      <url>/2019/02/28/jun-fen-zhi-pai-luogu1031-tang-guo-chuan-di-luogu2512-qi-xi-hui-bzoj3032-san-he-yi-ti-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="题意转换"><a href="#题意转换" class="headerlink" title="题意转换"></a>题意转换</h3><p>首先肯定将有摊位的位置和没摊位的位置进行交换才是又贡献的，所以将摊位看作1，实际上就是环状的均分纸牌的问题</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>其次行和列是可以分开处理的，对于行而言只需上下移动即可，对于列而言只需左右移动，故行列可分开处理</p><h3 id="无解"><a href="#无解" class="headerlink" title="无解"></a>无解</h3><p>只需判断总摊位数能否被行数或列数整除即可，都可以的话将答案加起来就可以了</p><h3 id="均分纸牌"><a href="#均分纸牌" class="headerlink" title="均分纸牌"></a>均分纸牌</h3><p>若一个数不足平均数则向右分一个负数，若一个数超过平均数则向右分一个正数，简单的，两个点之间最多只有一次交换（操作无后效性）平均值可以拓展为目标值，即低于目标值向左传负数，高于目标值向右传正数（如本题）</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>tot<span class="token punctuation">,</span>card<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>card<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        tot<span class="token operator">+</span><span class="token operator">=</span>card<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    tot<span class="token operator">/</span><span class="token operator">=</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        card<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>tot<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>card<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>            card<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>card<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//几年前的代码了（丑死了）</span></code></pre><h3 id="糖果传递"><a href="#糖果传递" class="headerlink" title="糖果传递"></a>糖果传递</h3><p>两个点之间依旧最多传递一次，且可以传递负数<br>故ans=sum(abs(x[i])) x[i]为i到i-1之间传递的值（对于i=1时i-1=n）<br>已知<br>a[i]-x[i]+x[i+1]==sum[i…i] (sum[l…r]代表从l到r的目标值的和)<br>则<br>x2=sum[2…2]-A1+X1<br>设 C1为a[1]-sum[2…2]<br>即 Ci=a[1…i]-sum[2….i+1]<br>Xi=X1-C[i-1]<br>ans=sum(abs(x[i])=sum(abs(x[1]-c[i-1])<br>即x[i]为c[0…n-1]的中位数</p><h3 id="为什么是中位数？"><a href="#为什么是中位数？" class="headerlink" title="为什么是中位数？"></a>为什么是中位数？</h3><p>若不是中位数，向非中位数方向时（即数少的方向）sum会增大（实践出真知）</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span><span class="token number">1000009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">1000009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> mid<span class="token punctuation">,</span>ans<span class="token punctuation">,</span>tot<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>tot<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    tot<span class="token operator">=</span>tot<span class="token operator">/</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>tot<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mid<span class="token operator">=</span>b<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">+</span><span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="回到正题"><a href="#回到正题" class="headerlink" title="回到正题"></a>回到正题</h3><p>既然我们已经知道环形的均分纸牌怎么做和无解怎么判，那就结束了</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>s1<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>s2<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">%</span>m<span class="token operator">&amp;&amp;</span>T<span class="token operator">%</span>n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"impossible\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>T<span class="token operator">/</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>T<span class="token operator">/</span>m<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">%</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>s1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s1<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span>s1<span class="token punctuation">[</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            ans<span class="token operator">+</span><span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>k<span class="token operator">-</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">%</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s2<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>s2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s2<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span>s2<span class="token punctuation">[</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            ans<span class="token operator">+</span><span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>k<span class="token operator">-</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">%</span>n<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> T<span class="token operator">%</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"both "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">%</span>n<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> T<span class="token operator">%</span>m<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"row "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"column "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> luogu </tag>
            
            <tag> 问题转化 </tag>
            
            <tag> bzoj </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5156 [USACO18DEC]Sort It Out 题解&amp;&amp;LIS 统计 学习笔记</title>
      <link href="/2019/02/22/p5156-usaco18dec-sort-it-out-ti-jie-lis-tong-ji-xue-xi-bi-ji/"/>
      <url>/2019/02/22/p5156-usaco18dec-sort-it-out-ti-jie-lis-tong-ji-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h4 id="LIS数量统计"><a href="#LIS数量统计" class="headerlink" title="LIS数量统计"></a>LIS数量统计</h4><p>设f[i]代表以第i个数字为开头的LIS长度,g[i]代表方案数<br>转移时从后往前 f[i]=f[i+1···n]中的最大值 g[i]为最大长度的方案数的和<br>用树状数组维护即可，若需要维护以第i个数字为结尾的最长的LIS长度，正的做即可<br>（代码和下面题解和在一起了，感觉还算简单）</p><h4 id="P5156-USACO18DEC-Sort-It-Out-题解"><a href="#P5156-USACO18DEC-Sort-It-Out-题解" class="headerlink" title="P5156 [USACO18DEC]Sort It Out 题解"></a>P5156 [USACO18DEC]Sort It Out 题解</h4><p>题目中的排序方式类似于快速排序，不会改变其他数的相对位置<br>类似于之前模拟赛中的卡片重新插入排序类似的是，求出其最长子序列的长度，然后由n减去它即是集合大小<br>但本题还需要我们求出字典序第K小的集合，即求字典序第K大的LIS，但这样会给下面的操作带来麻烦（不转也可以，但我看不懂不转的代码）<br>将a(i)=x转化为b(x)=i 即由下标映射权值转化为权值映射下标，则字典序第K大转换为下标字典序第K大方便接下来的操作（保证vector内有序（虽然听说不转换vector内依旧有序但我不会证明））<br>然后我们用vector（或链表）来维护长度为 k 的LIS的开头有哪些，然后从长度k到1进行枚举<br>若以当前枚举到的数字为开头的LIS方案数比k小则这个数字不能选（因为选了之后就算是最大的字典序也无法达到k）若比k大则往下选。<br>注意：当前枚举到的数不能比之前枚举到的数还要小，需要特判<br>这题由于权值和下标老是转来转去，故将详细的解释放在代码的注释里（其实是我自己理解能力低下）</p><h1 id="注意：代码中的下标和权值为了方便理解，标的是依据b的下标和权值。实际上b的下标是a的权值，b的权值是a的下标"><a href="#注意：代码中的下标和权值为了方便理解，标的是依据b的下标和权值。实际上b的下标是a的权值，b的权值是a的下标" class="headerlink" title="注意：代码中的下标和权值为了方便理解，标的是依据b的下标和权值。实际上b的下标是a的权值，b的权值是a的下标"></a>注意：代码中的下标和权值为了方便理解，标的是依据b的下标和权值。实际上b的下标是a的权值，b的权值是a的下标</h1><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> inf<span class="token operator">=</span><span class="token number">1e18</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> tot<span class="token operator">=</span>tot<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tot<span class="token operator">*</span>fs<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排名和下标为x的数为开头的LIS方案数</span><span class="token keyword">struct</span> gzw<span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> mx<span class="token punctuation">,</span>cnt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LIS长度和方案数</span>    <span class="token keyword">inline</span> <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>gzw <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> gzw <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//状态转移</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>mx <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>mx<span class="token punctuation">)</span> a<span class="token punctuation">.</span>mx <span class="token operator">=</span> b<span class="token punctuation">.</span>mx<span class="token punctuation">,</span> a<span class="token punctuation">.</span>cnt <span class="token operator">=</span> b<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>mx <span class="token operator">==</span> b<span class="token punctuation">.</span>mx<span class="token punctuation">)</span> a<span class="token punctuation">.</span>cnt <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>inf<span class="token punctuation">,</span> a<span class="token punctuation">.</span>cnt <span class="token operator">+</span> b<span class="token punctuation">.</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>bit<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> vec<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LIS长度为x的所有开头的下标</span><span class="token keyword">bool</span> use<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//x这个下标是否在LIS中</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span>gzw y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//更新</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">-</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        bit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>gzw <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//由于是从后往前做的，应当找权值比当前大的转移</span><span class="token punctuation">{</span>    gzw re<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1ll</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        re<span class="token operator">+</span><span class="token operator">=</span>bit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> re<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//cin>>n>>k;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cin>>a[i];</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        gzw ls<span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ls<span class="token punctuation">.</span>mx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新后长度+1</span>        vec<span class="token punctuation">[</span>ls<span class="token punctuation">.</span>mx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入下标 因为i是从大到小枚举故必然有序</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ls<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>ls<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    m<span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mx<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询最长子序列长度</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> cur<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span>m<span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> ii<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ii<span class="token operator">&lt;</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ii<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">long</span> <span class="token keyword">long</span> j<span class="token operator">=</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//下标</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>cur<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//权值不能比之前的小</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//往下走</span>            <span class="token punctuation">{</span>                use<span class="token punctuation">[</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                cur<span class="token operator">=</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            k<span class="token operator">-</span><span class="token operator">=</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再往后面找下标更小的    </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>n<span class="token operator">-</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>use<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出答案</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>花了一下午终于弄懂了QAQ，果然题解写的越复杂的人越菜QAQ</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> luogu </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> LIS </tag>
            
            <tag> 计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P5155 【[USACO18DEC]Balance Beam】</title>
      <link href="/2019/02/22/ti-jie-p5155-usaco18dec-balance-beam/"/>
      <url>/2019/02/22/ti-jie-p5155-usaco18dec-balance-beam/</url>
      
        <content type="html"><![CDATA[<p>分步证明，首先抛出结论：每个点的策略要么是不动，要么是随机移动直到左右两个点中的一个落下。  </p><h4 id="结论1：从点x开始在a和b之间移动在b落下的概率为-x-a-b-a"><a href="#结论1：从点x开始在a和b之间移动在b落下的概率为-x-a-b-a" class="headerlink" title="结论1：从点x开始在a和b之间移动在b落下的概率为 (x-a)/(b-a)"></a>结论1：从点x开始在a和b之间移动在b落下的概率为 (x-a)/(b-a)</h4><p>设概率为f[x]=k,则f[a]=0,f[b]=1。因为x有1/2几率往左走或往右走，所以<br>f[x]=(f[x-1]+f[x+1])/2<br>即f(x)满足等差数列的性质，则图像为由(a,0),(b,1)组成的直线，做两条垂线做相似三角形即可。从b到a反过来即可。</p><h4 id="结论2：ans-x-max-val-x-val-a-b-x-b-a-val-b-x-a-b-a-2"><a href="#结论2：ans-x-max-val-x-val-a-b-x-b-a-val-b-x-a-b-a-2" class="headerlink" title="结论2：ans(x)=max(val[x],(val[a](b-x)/(b-a)+val[b](x-a)/(b-a))/2)"></a>结论2：ans(x)=max(val[x],(val[a]<em>(b-x)/(b-a)+val[b]</em>(x-a)/(b-a))/2)</h4><p>期望的基本概念，贡献*概率的平均数</p><h4 id="结论3：若最优策略为使一个点在两个停止点之间移动则停止点的连线为一个凸包"><a href="#结论3：若最优策略为使一个点在两个停止点之间移动则停止点的连线为一个凸包" class="headerlink" title="结论3：若最优策略为使一个点在两个停止点之间移动则停止点的连线为一个凸包"></a>结论3：若最优策略为使一个点在两个停止点之间移动则停止点的连线为一个凸包</h4><p>若一个在凸包内的点为停止点，则在该停止点的期望计算为它本身的贡献值，但实际上若以原本就在它两侧的停止点计算贡献使贡献更高（凸包的定义）</p><h4 id="结论4：最优策略就是在两个停止点之间移动"><a href="#结论4：最优策略就是在两个停止点之间移动" class="headerlink" title="结论4：最优策略就是在两个停止点之间移动"></a>结论4：最优策略就是在两个停止点之间移动</h4><p>无论是什么策略，在本题中必然有停止下来的点，而且必然有两个以上。<br>若只有一个停止点，可实际上到达0或n+1时点必定会停下来，故至少有两个停止点<br>若有大于两个的停止点，则在到达一个停止点（非边界处）可以选择停或不停，若不停相当于这个点不是停止点，若停就相当于这个点就是停止点，无法再延伸。因为在本题中无论你何时到达x点，你的状态都是相同的，不存在根据不同的状态来选则的策略，故不存在大于两个的停止点（会不会有点绕）</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> K<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> gzw<span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>p<span class="token punctuation">,</span>q<span class="token punctuation">[</span><span class="token number">500009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> gzw <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span>gzw a<span class="token punctuation">,</span>gzw b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>gzw<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span>x<span class="token operator">-</span>b<span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">.</span>y<span class="token operator">-</span>b<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span>gzw a<span class="token punctuation">,</span>gzw b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span>     a<span class="token punctuation">.</span>x<span class="token operator">*</span>b<span class="token punctuation">.</span>y<span class="token operator">-</span>a<span class="token punctuation">.</span>y<span class="token operator">*</span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> tail<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>gzw x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tail<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>x<span class="token operator">-</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token operator">-</span>q<span class="token punctuation">[</span>tail<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> tail<span class="token operator">--</span><span class="token punctuation">;</span>    q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span>        p<span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>K<span class="token punctuation">;</span>        <span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gzw<span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>tail<span class="token operator">&amp;&amp;</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">&lt;</span>i<span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">==</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span>q<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">-</span>q<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>q<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> luogu </tag>
            
            <tag> 数论 </tag>
            
            <tag> 凸包 </tag>
            
            <tag> 证明 </tag>
            
            <tag> 期望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P1908 【逆序对】</title>
      <link href="/2019/02/21/ti-jie-p1908-ni-xu-dui/"/>
      <url>/2019/02/21/ti-jie-p1908-ni-xu-dui/</url>
      
        <content type="html"><![CDATA[<p>离散化多麻烦啊，还不如动态开点<br>代码解释在注释里QAQ</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//思路：运用权值动态开点线段树从后往前扫每次加上比自己小的且编号靠后的点的个数的贡献（由于从后往前扫可以无视编号）</span>空间<span class="token operator">&amp;</span>时间：nlogn<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token number">7000009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前区间的点的个数和</span><span class="token keyword">int</span> lson<span class="token punctuation">[</span><span class="token number">7000009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rson<span class="token punctuation">[</span><span class="token number">7000009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bh<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左儿子，右儿子，当前点的个数</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">500009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> now<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前点不存在，即当前区间内没有点存在</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> sum<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//特判</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//特判</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>lson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继续向左</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> sum<span class="token punctuation">[</span>lson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">query</span><span class="token punctuation">(</span>rson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向右的同时将左边的贡献加上去</span><span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> now<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> sum<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//特判</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//特判</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span> lson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>bh<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果没有左儿子，那就造一个</span>        <span class="token function">add</span><span class="token punctuation">(</span>lson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>l<span class="token punctuation">,</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span> rson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>bh<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果没有右儿子也造一个</span>        <span class="token function">add</span><span class="token punctuation">(</span>rson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sum<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>lson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>rson<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新贡献</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后祝大家NOIP2018RP++（如果管理员能够在复赛前审核完的话）</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> luogu </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P1034 【矩形覆盖】</title>
      <link href="/2019/02/21/ti-jie-p1034-ju-xing-fu-gai/"/>
      <url>/2019/02/21/ti-jie-p1034-ju-xing-fu-gai/</url>
      
        <content type="html"><![CDATA[<h4 id="这么好（shui）的题目怎么能不上随机化搜索呢"><a href="#这么好（shui）的题目怎么能不上随机化搜索呢" class="headerlink" title="这么好（shui）的题目怎么能不上随机化搜索呢"></a>这么好（shui）的题目怎么能不上随机化搜索呢</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//思路：随机化搜索+贪心（从今年D1可以看出贪心是多么重要的能力（然而D1AK也救不了我D2爆炸QAQ（事实证明D2还是多打暴力为上策）））</span><span class="token comment" spellcheck="true">//每次以一定的概率进行贪心选择或随机选择</span><span class="token comment" spellcheck="true">//贪心策略为将这个点加入一个矩形，选择代价最小的一个（很明显是错的，所以要随机化搜索辅助）</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">2000000000</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">struct</span> lj<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>point<span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>xx<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>yy<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//万能头不能用y1，所以就叫y,yy吧ovo</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>point<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>point<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> iii<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>iii<span class="token operator">&lt;=</span><span class="token number">250000</span><span class="token punctuation">;</span><span class="token operator">++</span>iii<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//其实没用哦0.0</span>        <span class="token function">random_shuffle</span><span class="token punctuation">(</span>point<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>point<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随机序列，左闭右开</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//初始化，每个矩阵里至少要有一个点，也是为什么要随机化序列的原因之一</span>            <span class="token punctuation">{</span>                x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>xx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>point<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>                y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>yy<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>point<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> mn<span class="token operator">=</span><span class="token number">2000000000</span><span class="token punctuation">,</span>cs<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//以70%的概率选择贪心，似乎70—90的概率都能过</span>                <span class="token punctuation">{</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ii<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>ii<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>ii<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>xx<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>yy<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">min</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>xx<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>yy<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token operator">-</span>y<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>mn<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            mn<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>xx<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>yy<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">min</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>xx<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>yy<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token operator">-</span>y<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            cs<span class="token operator">=</span>ii<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> cs<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不然随机</span>           <span class="token comment" spellcheck="true">//改变被选择的矩形的大小</span>                xx<span class="token punctuation">[</span>cs<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>xx<span class="token punctuation">[</span>cs<span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                x<span class="token punctuation">[</span>cs<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>cs<span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                yy<span class="token punctuation">[</span>cs<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>yy<span class="token punctuation">[</span>cs<span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                y<span class="token punctuation">[</span>cs<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>cs<span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                tot<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//统计答案    </span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>xx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>xx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>yy<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>yy<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tot<span class="token operator">=</span><span class="token number">200000000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断顶点重合</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>xx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>xx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>yy<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>yy<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  tot<span class="token operator">=</span><span class="token number">200000000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//纵边重合</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>yy<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>yy<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>xx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>xx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  tot<span class="token operator">=</span><span class="token number">200000000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//横边重合</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>tot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>突然发现自己唯二的题解都是些奇奇怪怪的算法呢…<br>请大家尽情hack吧ovo</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> luogu </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 非正解做法 </tag>
            
            <tag> 随机化搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>政治正确的睡前故事（4则）【搬运】【破事水】</title>
      <link href="/2019/02/21/zheng-zhi-zheng-que-de-shui-qian-gu-shi-4-ze-ban-yun-po-shi-shui/"/>
      <url>/2019/02/21/zheng-zhi-zheng-que-de-shui-qian-gu-shi-4-ze-ban-yun-po-shi-shui/</url>
      
        <content type="html"><![CDATA[<p>（零）<br>很久以前，曾经有一个名叫小红帽的孩子，生活在大森林的边上，大森林里充满了濒临灭绝的猫头鹰和珍稀植物，如果有人愿意花时间研究它们，就会发现癌症的治疗方法。</p><p>小红帽和一位称为母亲的养育者一起生活，尽管这并不意味着她们有一个密切的生物学上的联系，实际上并不一定有，她很少考虑这一点。当然她也不打算诋毁非传统家庭的同等价值，如果传达了这样的印象，那很抱歉。</p><p>有一天，她的母亲让她把一篮子有机水果和矿泉水送到祖母的家里。</p><p>小红帽说，“母亲，这不会是窃取那些多年来一直努力在树林里运输各种包裹的工会人员的工作机会吗？”</p><p>小红帽的母亲向她保证，她已经打电话给工会领导，并获得了一份许可，只要这是一次富有同情心的特殊任务就行。</p><p>“但是妈妈，你让我去做这样的事，请问是不是在逼迫我？”</p><p>小红帽的母亲正式指出，女性之间不可能互相压迫，因为在所有女性都获得自由的解放之前，她们所有女性都受着同样压迫。</p><p>“但是妈妈，为什么你不让我的兄弟送这个篮子，因为他是一个男性，天生的压迫者，应该知道体验一下被压迫的是什么样的。”</p><p>小红帽的母亲解释说，她的兄弟正在参加一个动物权利集会。此外，这也不是传统的女性工作，而是一种能够互相帮助从而产生社区感的赋权行为。</p><p>“但是这会不会压迫到奶奶，暗示她病了，无法独立地生活和进一步完善自我？”</p><p>小红帽的母亲解释说，她的祖母实际上并没有生病或丧失能力，也没有精神残疾，尽管这并不意味着如果她有这些，就不如其他人“健康”。</p><p>听到这里，小红帽觉的她可以把篮子交给祖母，所以她出发了。</p><p>许多人认为森林是一个充满危险的地方，但是小红帽知道这是一种非理性的恐惧，这种恐惧基于一种将自然界视为可利用资源的父权社会灌输的文化模式，因此认为自然界中的捕食者是无法容忍的竞争者。还有人因为害怕强盗等犯罪者而避开森林，但是小红帽认为，在一个真正无阶级的社会中，所有被边缘化的人都能够走出困境，并被人们所接受为一种有效的生活方式。</p><p>在路上，小红帽经过一个猎人一样的人，然后在小路边捡了一些花。突然她惊恐地发现一只狼靠近，狼问她的篮子里有什么。小红帽的老师曾警告过她永远不要和陌生人说话，但她有信心控制自己的萌芽性行为，所以她选择与狼对话。</p><p>她回答说：“我正在以团结友爱的目的，带给我祖母一些健康的零食。”</p><p>狼说，“亲爱的你要知道，一个小女孩独自穿过这些树林是不安全的。”</p><p>小红帽说：“我发现你的性别歧视言论极端令人反感，但我会忽略它，因为你作为社会的传统意义上的孤立者一员，其压力导致你发展出另一个和我们不同，但依然完全有效的世界观。现在请原谅，我宁愿继续前进。“</p><p>红帽回到路上，走向她祖母家。</p><p>但是因为狼在传统社会之外的地位，使他脱离了线性西方式思想的奴役，从而知道了一条通往祖母家的近路。于是他在小红帽之前从进房子吃了奶奶，当然这是一种他作为捕食者性质而采取的行动。然后，在没有严格的传统性别角色概念的情况下，他穿上了奶奶的睡衣，爬到床上等着。</p><p>红帽进入小屋说：“奶奶，我给你带来了一些没有经过残酷生物压迫的小吃，还有向你致敬，因为你是控制了智慧和养育性的女性。”</p><p>狼轻声说道，“走近一点，孩子，这样我才能看清你。”</p><p>小红帽走近说，“女神啊！奶奶，为什么你有这么大的眼睛！“</p><p>“你忘了我戴了视力障碍的光学矫正用品的。”</p><p>“但是奶奶，你的鼻子真大啊，当然这是巨大的好鼻子。”</p><p>“我的孩子，我是可以把它整容一下以帮助我的演艺事业，但我没有屈服于那种社会压力。”</p><p>“还有奶奶，你为什么有这么大的锋利牙齿！”</p><p>狼不能再接受这些种族主义诽谤，而且也因为在适合他的正常环境反应中，跳下床抓住小红帽，并且张开他的大嘴，以至于小红帽可以看到她可怜的祖母蜷缩在他肚子里。</p><p>“你是不是忘记了什么吗？”小红帽勇敢地大喊。“在进入新的亲密接触之前，你必须先征得我的同意！”</p><p>狼对这句话感到震惊，以至于放开了她。</p><p>与此同时，一个人挥舞着猎枪冲进小屋，大喊“放手！”</p><p>“你觉得你在做什么？”小红帽立刻大吼道。“如果我现在让你帮助我，我就会对自己能力缺乏信心，这会导致我以后自尊心太差，影响我的大学入学考试成绩。”</p><p>“最后的机会，小姑娘！把手从濒临灭绝物种身上拿开！这是一个联邦调查局的警告！“这个像猎人的人，突然在小红帽行动前，开枪打爆了她的头。</p><p>“谢天谢地，你能及时赶到，”狼说。“这小鬼和她的祖母在这里引诱我。我真是个傻瓜。“</p><p>“不，我认为现在我才是真正的受害者，”这个人说。“自从我看到她在采摘那些受保护的花朵以来，我一直在压抑我的愤怒。现在更给我留下了精神创伤。你有阿司匹林吗？“</p><p>“当然有。”狼说。</p><p>“谢谢。”</p><p>“我能体会你的痛苦，”狼说，然后他拍了那个人的肩膀，手感很好，狼打了一个嗝，然后说：“你有没有胃药？”</p><p>（一）政治正确的小红帽</p><p>从前有个叫“小红帽”的年轻人，她和母亲一起住在一大片森林旁边。一天，她母亲叫她把一篮子新鲜水果和矿泉水送去祖母家――提醒各位，不是说送货就是女人（womyn）的工作，而是因为这个举动是慷慨的、有助于培养归属感。还有，祖母并没有生病，她的身体和精神都完全健康，作为成熟的成年人完全有照料自己的能力。 </p><p>于是，小红帽就带上篮子，向着森林出发了。许多人都觉得森林是个不祥、危险的地方，从来不会涉足。但小红帽对自己刚刚萌发的性意识具有充分自信，丝毫没有被这类露骨的弗洛伊德式意像吓倒。 </p><p>在去祖母家的路上，一条狼上前搭讪，问她篮子里装的是什么。小红帽答道：“一些健康小吃，给我那位作为成熟的成年人完全有能力照顾自己的祖母。” </p><p>狼说：“我说亲爱的，你一个小女孩走树林不安全。” </p><p>小红帽答道：“你的性别歧视言论让我极其反感，但我不来和你计较，因为你向来处在流放于社会之外的地位，由此产生的压力催生了你独特的、且完全合理的世界观。没别的事我先上路了。” </p><p>小红帽在大路上继续走着。然而，由于狼处于社会之外，没有对线性的、西方式的思维方式的奴性依附，因此知道一条通往祖母家的更快路线。他冲进屋子，吃掉了祖母――这对于他这样的肉食动物来说是完全合理的行为。然后，由于不受刻板的、拘泥传统的、关于何为男性何为女性的概念的束缚，他穿上了祖母的睡衣、爬上了床。 </p><p>小红帽走进小屋说：“奶奶，我带来了些不含钠、不含脂肪的小吃，来向您这位智慧慈爱的女性家长致敬。” </p><p>狼在床上柔声说：“走近点，孩子，让我看看你。” </p><p>小红帽说：“哦，我忘了您有蝙蝠般的视力障碍（optically challenged）。奶奶，您的眼睛真大呀。” </p><p>“它们看了许多，也宽恕了许多，亲爱的。” </p><p>“奶奶，您的鼻子真大呀――当然了，是相对而言，而且大绝对有大的魅力。” </p><p>“它闻了许多，也宽恕了许多，亲爱的。” </p><p>“奶奶，您的牙真大呀！” </p><p>狼答道：“我对自己本身的形象相当满意。”说着跳下床来。他把小红帽抓在自己的爪子中间，准备吞下肚去。小红帽尖叫起来――这不是在害怕狼身上明显的异装趋势，而是受惊于他对别人个人空间的蓄意侵犯。 </p><p>尖叫声传到了一个路过的伐木工（他本人喜欢被称为“木质燃料技术员”）的耳朵里。他闯进木屋，看见了混战，于是试图干预。但是，当他举起斧子，小红帽和狼却都停止了动作。 </p><p>“你知不知道自己在干什么？”小红帽质问。 </p><p>伐木工眨巴着眼睛试图作答，但嘴里一个字都说不出来。 </p><p>“你像个尼安德特人一样闯了进来，还相信武器能代替你自身的思考！”小红帽喊叫着，“性别歧视！物种歧视！你胆敢假定女人（womyn）和狼不能在没有男人的帮助下解决自身的争端！” </p><p>听到小红帽充满激情的演说，奶奶从狼的嘴里一跃而出！她一把夺过伐木工的斧子，把他的脑袋砍了下来。劫难过后，小红帽、奶奶、和狼都有了种同心协力的感觉。他们决定组成一个建立在尊重和合作基础上的非主流家庭，从此，一家三口在森林里开始了幸福的生活。 （完）</p><p>（二）政治正确的三只小猪 </p><p>很久很久以前，有三只小猪住在一起，他们互尊互爱，与环境和谐共处。这三只小猪，使用本地区的原产材料，各自修建了一幢美丽的房屋。头一只猪用稻草盖房子，第二只用木头，第三只用粪便、粘土和藤蔓做成砖胚，在一间小砖窑里烧成砖块，然后拿砖块垒成屋子。完工之后，三只小猪对各自的活计都很满意，于是便在和平共处、自主自决的气氛中生活了下去。 </p><p>可是，这份田原牧歌般的宁静很快被打破了。某天，一只满脑子扩张主义念头的大灰狼出现在这个地区。他看见那三只小猪，顿时饥火难耐，他的饥渴既属于肉体范畴，也属于意识形态的领域。三只小猪看见大灰狼，一起躲进稻草盖的屋子。大灰狼奔到门前，一边踹门，一边扯开嗓门大喊，“小猪，小猪，让我进门！” </p><p>小猪齐声应道，“为了保家护国，捍卫传统文化，我们小猪不畏惧你的炮艇外交政策！” </p><p>然而，大灰狼又怎肯轻易放弃他胸中的帝国主义天命论（manifest destiny）？他鼓起肚子，一口气就吹倒了稻草屋子。惊恐的小猪连忙跑进木头做的小屋，大灰狼在背后紧追不舍。其他坏狼买下稻草屋子原先占据的土地，建设了香蕉种植园。 </p><p>来到木头小屋的门前，大灰狼又是一边踹门，一边扯开嗓门大喊，“小猪，小猪，让我进门！” </p><p>小猪齐声应道，“滚去地狱吧，你这食肉的帝国主义压迫者！” </p><p>听见这个，大灰狼屈尊纡贵地笑了两声，想道，“小猪真是够傻够天真的。消灭他们委实有些可惜，但任何人妄图阻止进步的历史车轮，都将是螳臂当车。” </p><p>于是，大灰狼鼓起肚子，一口气又吹倒了木头屋子。三只小猪奔进砖头小屋，大灰狼险些咬中他们的脚后跟。木头屋子原先占据的土地也被其他坏狼盘踞，为脑满肠肥的野狼建起分时度假公寓，每个单元都是木头屋子的玻璃纤维重建版，本土纪念品商店、通气管潜水服务、海豚表演等等享受也一应俱全。 </p><p>来到砖头小屋的门前，大灰狼依然一边踹门，一边扯开嗓门大喊，“小猪，小猪，让我进门！” </p><p>这一次，小猪的回应是齐声合唱团结之歌，给联合国写信表示抗议。 </p><p>小猪竟敢拒绝从食肉动物的角度看清大势所趋，这让大灰狼极为愤怒。他鼓起肚子，使劲吹气，又鼓起肚子，再使劲吹气——结果却抓着自己的胸口倒在地上，经年累月的高脂食谱终于让他发了严重的心肌梗塞。 </p><p>三只小猪因正义取得了最后胜利而欢欣喜悦，绕着大灰狼的尸体唱歌跳舞。他们的下一步行动是解放家园故土。召集起其他被逐出自家土地的小猪之后，这支“猪本主义者”*的队伍袭击了度假公寓，用机关枪和火箭筒把残忍的恶狼压迫者杀了个一干二净，向全世界发出明确的宣言——不许干涉我国内政。然后，小猪建立了理想的社会主义民主制度，免费教育，全民医保，人人买得起房子。 </p><p>请注意：本故事中的狼均为隐喻性的概念生物。在故事的写作过程中，没有任何真实的狼受到伤害。 </p><p>*porcinistas，等于porcinisters，即porcinist的奉行者。Porcinist的字源是porcin，拉丁文的“猪”。</p><p>（三）政治正确的皇帝的新装 </p><p>非常遥远的某个地方，过去很久的某个时候，有一位旅行裁缝，他来到了一个陌生的国度。告诉你，行游天下的裁缝一般而言总是矜持缄默，小心翼翼，绝不逾越当地行为规范的界限。可我们的这位裁缝呢？却超乎寻常地喜爱社交，对礼数什么的不大放在心上。他很快在这里的一家客栈安顿下来，狂喝滥饮，肆无忌惮地侵入女性雇员的个人空间，把一些毫无教育意义的故事挂在嘴边，说的都是补锅匠、掏粪工等等各色劳动人民的闲话。 </p><p>客栈老板找警方投诉，警员抓着裁缝来到了皇帝面前。正如你所预料的，皇帝打生下来就笃信君权的绝对正当性和雄性的自然优越性，让他变成了一个自负虚荣、在智慧运用方面有障碍需要克服（wisdom-challenged）的暴君。裁缝注意到了皇帝的这些性格特征，于是决定利而用之。 </p><p>皇帝问道，“在被驱逐出吾的领土之前，尔还有什么最后的请求吗？” </p><p>裁缝答道，“恕小人斗胆，恳请陛下赐下荣耀，允许本人为陛下新制一身袍服。小的我备有一种极特殊的布料，既罕见又精美，唯有特定的人群方可一睹其真容——这种人，无疑是陛下最愿意留在王国里的，他们政治上讲正确、道德上讲正气、知识上讲学习、文化上讲包容，而且一不抽烟、二不喝酒、三听黄段子绝对不笑，电视基本不看、乡村音乐基本不听、烧烤基本不吃。” </p><p>思忖片刻，皇帝同意了裁缝的请求。帝国及其臣民的存在意义就是给他颜面增光，如此主意尽管充满了法西斯主义和睾丸酮的气味，但皇帝听了却欣喜若狂——就好比译者这废柴把林志玲娶回家得到的感觉乘以十万倍的结果。 </p><p>当然啦，天底下并不存在这么美妙的布料。游离于正常社会之外的多年生活经验使得我们这位好裁缝发展出了他自个儿的道德观，正是这种道德观，让他觉得有义务代表全世界独立工匠忽悠并羞辱皇帝。因此，他一边废寝忘食地勤勉劳作，一边想出种种方法，让皇帝相信他正在裁剪那美妙的布料，缝制君王的华服——虽说以最严格的客观知觉而论，这种布料并不真的存在。 </p><p>等裁缝宣布终于大功告成，皇帝穿上他的新装，站在镜子前欣赏自己的英姿。和呱呱坠地时同样赤裸的皇帝站在那里，你可以看清盘剥农民兄弟的血脂多年之后，他的身躯已经变成了多么丑陋的一坨又暄又白的肥肉。皇帝本人毫无疑问也看见了，但却必须假装自己眼中有一身政治正确的美丽衣裳。为了炫耀他的光辉形象，皇帝下令第二天举办大游行。 </p><p>隔天早晨，他的臣民整整齐齐地站在街道两旁，准备迎接盛大的游行队伍。消息早已传遍全国，只有秉持健康生活方式的精英人士方能看得到皇帝的新装，每个人都打定主意，他或她必须比他或她的邻居更加正气浩然。 </p><p>这场游行进行得不可谓不热闹。皇帝拖着他苍白、臃肿、父权式的躯壳沿街而行，所有人都欢喜赞叹他的美丽新装，噢噢啊啊的感慨声此起彼伏。唯一不和谐的声音来自一个小男孩，他大声叫道：“可皇帝实在是赤身裸体的呀！” </p><p>游行队伍停下了，皇帝驻足不前。死寂笼罩了人群，直到一个脑筋转得快的农夫喊道，“不，皇帝才不是赤身裸体的！皇帝只是在奉行穿脱自便（clothing-optional，裸体主义的政治正确叫法）的生活方式而已！” </p><p>欢喜赞叹的声音重又响起，民众扯掉身上的衣服，沐浴着阳光载歌载舞，大自然的原意不正是这样吗？从那天开始，这里变成了一个穿脱自便的国度，而我们那位好裁缝呢？他从此断了生计，默默收拾起针线离开，再也没有人听说过他的消息。 </p><p>祝你们睡个好觉ovo</p>]]></content>
      
      
      <categories>
          
          <category> 故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 政治敏感 </tag>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P1972 【[SDOI2009]HH的项链】</title>
      <link href="/2019/02/21/ti-jie-p1972-sdoi2009-hh-de-xiang-lian/"/>
      <url>/2019/02/21/ti-jie-p1972-sdoi2009-hh-de-xiang-lian/</url>
      
        <content type="html"><![CDATA[<p>评测记录：<a href="https://www.luogu.org/record/show?rid=14850706" target="_blank" rel="noopener">https://www.luogu.org/record/show?rid=14850706</a><br>时间用了1200ms，感觉应该是比较快的莫队了<br>莫队基本思路之前的题解已经讲过了，不再赘述<br>这里主要讲一下关于块大小的优化和奇偶性优化<br>一些细节上的卡常数就放在代码里讲了</p><h3 id="块大小优化"><a href="#块大小优化" class="headerlink" title="块大小优化"></a>块大小优化</h3><p>好吧，在写这个之前，我从机房巨佬空中得到了一个结论莫队的复杂度是<br><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fye4kurpkng303s01a0n2.gif" alt>（S为块大小）<br>但实际上是<br><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fye4rw6mt0g304m01a0pq.gif" alt><br>证明略<br>故我们可以适当的调大块的大小<br>由爆OJ得，本题块大小应当在<img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fye4v206aag301z00j0ag.gif" alt>左右（不适用所有程序）</p><h3 id="奇偶性优化"><a href="#奇偶性优化" class="headerlink" title="奇偶性优化"></a>奇偶性优化</h3><p>若上一块中的右端点坐标是递增的，则这块中右端点递减<br>若上一块中的右端点坐标是递减的，则这块中右端点递增<br>这样的话，原本在块转移时右端点的移动情况由<br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fye5jv9f7pj30ih0f1t8q.jpg" alt><br>变为<br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fye5kg97lxj30q00hc74c.jpg" alt><br>故变得更优<br>例如样例</p><pre class=" language-cpp"><code class="language-cpp"><span class="token number">1</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">100</span><span class="token number">11</span> <span class="token number">100</span><span class="token number">11</span> <span class="token number">20</span></code></pre><p>若使用奇偶性优化<br>1,2——&gt;1,100——&gt;11,100——&gt;11,20<br>不使用<br>1,2——&gt;1,100——&gt;11,20——&gt;11,100<br>效果可以说是很显著了</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize(2)</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize(3)</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("Ofast")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("inline")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fgcse")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fgcse-lm")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fipa-sra")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-ftree-pre")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-ftree-vrp")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fpeephole2")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-ffast-math")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fsched-spec")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("unroll-loops")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-falign-jumps")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-falign-loops")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-falign-labels")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fdevirtualize")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fcaller-saves")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fcrossjumping")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fthread-jumps")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-funroll-loops")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fwhole-program")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-freorder-blocks")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fschedule-insns")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("inline-functions")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-ftree-tail-merge")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fschedule-insns2")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fstrict-aliasing")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fstrict-overflow")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-falign-functions")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fcse-skip-blocks")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fcse-follow-jumps")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fsched-interblock")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fpartial-inlining")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("no-stack-protector")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-freorder-functions")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-findirect-inlining")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fhoist-adjacent-loads")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-frerun-cse-after-loop")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("inline-small-functions")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-finline-small-functions")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-ftree-switch-conversion")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-foptimize-sibling-calls")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fexpensive-optimizations")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-funsafe-loop-optimizations")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("inline-functions-called-once")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fdelete-null-pointer-checks")</span><span class="token comment" spellcheck="true">//看起来很有用但的确很有用的40行优化</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">namespace</span> IO<span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Buffsize<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">25</span><span class="token punctuation">,</span>Output<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">25</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> Ch<span class="token punctuation">[</span>Buffsize<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>St<span class="token operator">=</span>Ch<span class="token punctuation">,</span><span class="token operator">*</span>T<span class="token operator">=</span>Ch<span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">char</span> <span class="token function">getc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token punctuation">(</span>St<span class="token operator">==</span>T<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>T<span class="token operator">=</span><span class="token punctuation">(</span>St<span class="token operator">=</span>Ch<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fread</span><span class="token punctuation">(</span>Ch<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>Buffsize<span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">,</span>St<span class="token operator">==</span>T<span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token operator">*</span>St<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> Out<span class="token punctuation">[</span>Output<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>nowps<span class="token operator">=</span>Out<span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">fwrite</span><span class="token punctuation">(</span>Out<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>nowps<span class="token operator">-</span>Out<span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nowps<span class="token operator">=</span>Out<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ch<span class="token operator">=</span><span class="token function">getc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>ch<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>T x<span class="token punctuation">,</span><span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span><span class="token operator">*</span>nowps<span class="token operator">++</span><span class="token operator">=</span><span class="token number">48</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span>nowps<span class="token operator">++</span><span class="token operator">=</span><span class="token string">'-'</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token operator">-</span>x<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> sta<span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tp<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>tp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token punctuation">;</span>x<span class="token operator">/</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>sta<span class="token punctuation">[</span><span class="token operator">++</span>tp<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>tp<span class="token punctuation">;</span><span class="token operator">*</span>nowps<span class="token operator">++</span><span class="token operator">=</span>sta<span class="token punctuation">[</span>tp<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>nowps<span class="token operator">++</span><span class="token operator">=</span>ch<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//IO（fread，fwite）优化，自行百度</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> IO<span class="token punctuation">;</span><span class="token keyword">int</span> color<span class="token punctuation">[</span><span class="token number">500009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span><span class="token number">500009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>divi<span class="token punctuation">;</span><span class="token keyword">int</span> blong<span class="token punctuation">[</span><span class="token number">500009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> lj<span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>bel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>q<span class="token punctuation">[</span><span class="token number">500009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">rnk</span><span class="token punctuation">(</span>lj a<span class="token punctuation">,</span>lj b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> blong<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">^</span>blong<span class="token punctuation">[</span>b<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">?</span>blong<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">&lt;</span>blong<span class="token punctuation">[</span>b<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">(</span>blong<span class="token punctuation">[</span>a<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span>a<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>r<span class="token operator">:</span>a<span class="token punctuation">.</span>r<span class="token operator">></span>b<span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//奇偶性优化</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> <span class="token operator">*</span>i<span class="token operator">=</span>color<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">*</span>ed<span class="token operator">=</span>color<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">!=</span>ed<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指针遍历数组更快，i++比++i慢</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>i<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    divi<span class="token operator">=</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.65</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//块大小优化</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> <span class="token operator">*</span>i<span class="token operator">=</span>blong<span class="token punctuation">,</span><span class="token operator">*</span>ed<span class="token operator">=</span>blong<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>bfj<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">!=</span>ed<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">,</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//同上上</span>    <span class="token punctuation">{</span>        j<span class="token operator">=</span>bfj<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">*</span>i<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>divi<span class="token punctuation">)</span> <span class="token operator">++</span><span class="token operator">*</span>i<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        bfj<span class="token operator">=</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> lj <span class="token operator">*</span>i<span class="token operator">=</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">*</span>ed<span class="token operator">=</span>q<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">!=</span>ed<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//同上</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>bel<span class="token punctuation">)</span><span class="token operator">=</span>i<span class="token operator">-</span>q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>rnk<span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">></span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span> num<span class="token operator">+</span><span class="token operator">=</span><span class="token operator">!</span>p<span class="token punctuation">[</span>color<span class="token punctuation">[</span><span class="token operator">--</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span> num<span class="token operator">-</span><span class="token operator">=</span><span class="token operator">!</span><span class="token operator">--</span>p<span class="token punctuation">[</span>color<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> num<span class="token operator">+</span><span class="token operator">=</span><span class="token operator">!</span>p<span class="token punctuation">[</span>color<span class="token punctuation">[</span><span class="token operator">++</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">></span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> num<span class="token operator">-</span><span class="token operator">=</span><span class="token operator">!</span><span class="token operator">--</span>p<span class="token punctuation">[</span>color<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>bel<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> <span class="token operator">*</span>i<span class="token operator">=</span>ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">*</span>ed<span class="token operator">=</span>ans<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">!=</span>ed<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//同上</span>    <span class="token punctuation">{</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>突然发现树状数组跑得没我快ovo</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> luogu </tag>
            
            <tag> 莫队 </tag>
            
            <tag> 卡常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P2144 【[FJOI2007]轮状病毒】</title>
      <link href="/2019/02/21/ti-jie-p2144-fjoi2007-lun-zhuang-bing-du/"/>
      <url>/2019/02/21/ti-jie-p2144-fjoi2007-lun-zhuang-bing-du/</url>
      
        <content type="html"><![CDATA[<p>打表题竟然没有打表程序！<br>打表思路：枚举选边，并查集维护剪枝<br>复杂度O（答案）（实际上多很多）</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize(2)</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize(3)</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("Ofast")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("inline")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fgcse")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fgcse-lm")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fipa-sra")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-ftree-pre")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-ftree-vrp")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fpeephole2")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-ffast-math")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fsched-spec")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("unroll-loops")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-falign-jumps")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-falign-loops")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-falign-labels")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fdevirtualize")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fcaller-saves")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fcrossjumping")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fthread-jumps")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-funroll-loops")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fwhole-program")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-freorder-blocks")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fschedule-insns")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("inline-functions")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-ftree-tail-merge")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fschedule-insns2")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fstrict-aliasing")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fstrict-overflow")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-falign-functions")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fcse-skip-blocks")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fcse-follow-jumps")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fsched-interblock")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fpartial-inlining")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("no-stack-protector")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-freorder-functions")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-findirect-inlining")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fhoist-adjacent-loads")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-frerun-cse-after-loop")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("inline-small-functions")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-finline-small-functions")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-ftree-switch-conversion")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-foptimize-sibling-calls")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fexpensive-optimizations")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-funsafe-loop-optimizations")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("inline-functions-called-once")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize("-fdelete-null-pointer-checks")</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">struct</span> gzw<span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> st<span class="token punctuation">,</span>ed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>way<span class="token punctuation">[</span><span class="token number">1000009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> bcj<span class="token punctuation">[</span><span class="token number">1000009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">==</span>bcj<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">?</span>x<span class="token operator">:</span><span class="token function">find</span><span class="token punctuation">(</span>bcj<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不使用路径压缩的并查集支持删除ovo    </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> now<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> cs<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">-</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token operator">-</span>cs<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//剩下的边全选也选不到n-1条</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cs<span class="token operator">==</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">++</span>ans<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//选好了</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>way<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>st<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">find</span><span class="token punctuation">(</span>way<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>ed<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">register</span> <span class="token keyword">long</span> <span class="token keyword">long</span> tmp<span class="token operator">=</span>bcj<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>way<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>st<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        bcj<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>way<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>st<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>way<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//连接</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bcj<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为没有路径压缩，所以直接把原来的父节点的父亲改为自己就行了</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        n<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            bcj<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">++</span>m<span class="token punctuation">;</span>            way<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span>st<span class="token operator">=</span>j<span class="token punctuation">;</span>            way<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span>ed<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">++</span>m<span class="token punctuation">;</span>        way<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span>st<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        way<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span>ed<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">++</span>m<span class="token punctuation">;</span>            way<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span>st<span class="token operator">=</span>j<span class="token punctuation">;</span>            way<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span>ed<span class="token operator">=</span>n<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//以上为连边</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样的代码跑到20还是在可以等待的时间内的（本机3分钟左右）<br>最后跑出来的结果是：<br>16 45 121 320 841 2205 5776 15125 39601 103680 271441 710645 1860496 4870845 12752041 33385280 87403801 228826125<br>然后明显的是 16 121 841 5776 都是平方（其实只有 16,121 比较明显后两个是根据前两个猜的）<br>分别是 4,11,29,76的平方<br>接下来在考虑45,320,2205,15125和平方有什么关系<br>由小学奥数找规律得，他们可能是一个平方数加减一个数得到的，则去找离他们最近/远的平方数是哪些<br>计算器得离他们最近的平方根分别是：7,18,47,123<br>然后和在一起就是 4,7,11,18,29,47,76,123<br>然后就是很明显的斐波那契数列了<br>在偶数位上要减去4<br>然后仔细思考发现暴int_128了<br>于是就写了python <del>不太懂语法所以写的十分丑码风毒瘤</del></p><pre class=" language-python"><code class="language-python">n<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span>n<span class="token operator">=</span>int<span class="token punctuation">(</span>n<span class="token punctuation">)</span>a<span class="token operator">=</span><span class="token number">1</span>b<span class="token operator">=</span><span class="token number">3</span>c<span class="token operator">=</span><span class="token number">3</span>d<span class="token operator">=</span><span class="token number">666</span><span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">elif</span> n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> c<span class="token operator">&lt;=</span>n<span class="token punctuation">:</span>        d<span class="token operator">=</span>a        a<span class="token operator">=</span>b        b<span class="token operator">=</span>d<span class="token operator">+</span>b        c<span class="token operator">=</span>c<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token operator">*</span>b<span class="token number">-4</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><del>这么毒瘤的码风要是被抄题解的话应该很好找吧</del><br>如果你打完表不想做小学奥数题的话可以上这个网站<a href="https://oeis.org/" target="_blank" rel="noopener">OIES</a></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> luogu </tag>
            
            <tag> 打表 </tag>
            
            <tag> 找规律 </tag>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 2 15 总结</title>
      <link href="/2019/02/21/2019-2-15-zong-jie/"/>
      <url>/2019/02/21/2019-2-15-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h4><p>【简要题面】有n个商品，实际价格为ai，价值是ci，需要口袋中钱≥bi时才可以购买。现在你有m元，求可以购买到的最大价值。n&lt;=500,m&lt;=5000<br>考场的时候按b从大到小排序然后被hack了，然后就耍小聪明在昨晚一遍后把序列多随机打乱几遍（结果没用）<br>正解为按照bi-ai降序 若存在物品1比物品2优先级较高<br>则b1-a1&gt;=b2<br>则b1-a1&gt;=b2-a2<br>然后dp就可以了</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> f<span class="token punctuation">[</span><span class="token number">5009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> gzw<span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>v<span class="token punctuation">;</span><span class="token punctuation">}</span>sub<span class="token punctuation">[</span><span class="token number">509</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">rnk</span><span class="token punctuation">(</span>gzw a<span class="token punctuation">,</span>gzw b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>a<span class="token operator">-</span>a<span class="token punctuation">.</span>b<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>a<span class="token operator">-</span>b<span class="token punctuation">.</span>b<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("buy.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("buy.out","w",stdout);</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>sub<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>sub<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>rnk<span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">>=</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>j<span class="token operator">-</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*for(int i=1;i&lt;=40;i++)    {    memset(f,-1,sizeof(f));    for(int i=1;i&lt;n;i++)    {        swap(sub[rand()%(n-i+1)+i],sub[rand()%(n-i+1)+i]);    }    for(int i=1;i&lt;n;i++)    {        swap(sub[rand()%(n-i+1)+i],sub[rand()%(n-i+1)+i]);    }    for(int i=1;i&lt;n;i++)    {        swap(sub[rand()%(n-i+1)+i],sub[rand()%(n-i+1)+i]);    }    f[m]=0;    for(int i=1;i&lt;=n;i++)    {        for(int j=0;j&lt;=m;j++)        {            if(f[j]!=-1&amp;&amp;j>=sub[i].b)            {                f[j-sub[i].a]=max(f[j-sub[i].a],f[j]+sub[i].v);                ans=max(ans,f[j-sub[i].a]);            }        }    }    }*/</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h4 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h4><p>【简要题面】问数字d能否等于数组a，b，c各取一个数出来所加起来的和<br>考场思路将a,b,c排序后不就是在三维空间里找到一个点使其和为d吗？<br>那不就是模拟退火吗（但实际上三维的模拟退火对准度要求很高，时间复杂度很大，本题询问在100左右时才能准确的跑出结果）<br>然后调了两个小时，挂了（还好今天题比较简单）<br>正解就是把bc和起来扔到hash表里（暴力用的map会超时）<br>每次枚举a，在hash表里查询是否有符合条件的值<br>改编题：将a,b,c大小设为10000,询问只有一个，模拟退火即可</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> aa<span class="token punctuation">,</span>bb<span class="token punctuation">,</span>cc<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> dd<span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">[</span><span class="token number">1000009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nt<span class="token punctuation">[</span><span class="token number">1000009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>val<span class="token punctuation">[</span><span class="token number">1000009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bh<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> hashnum<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">37</span><span class="token operator">*</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1000007</span><span class="token punctuation">;</span>    bh<span class="token operator">++</span><span class="token punctuation">;</span>    nt<span class="token punctuation">[</span>bh<span class="token punctuation">]</span><span class="token operator">=</span>head<span class="token punctuation">[</span>hashnum<span class="token punctuation">]</span><span class="token punctuation">;</span>    val<span class="token punctuation">[</span>bh<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>    head<span class="token punctuation">[</span>hashnum<span class="token punctuation">]</span><span class="token operator">=</span>bh<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> hashnum<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">37</span><span class="token operator">*</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1000007</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>hashnum<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("game.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("game.out","w",stdout);</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    aa<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bb<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cc<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>aa<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>bb<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cc<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>bb<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>cc<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    dd<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>dd<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">bool</span> kx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>aa<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                kx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>kx<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h4 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h4><p>【简要题面】现在你在数轴上的坐标为x,你需要到坐标y。现在有两种操作：1.先前或向后一步2.坐标<em>2<br>dp，f[i]=f[i-1]+1或f[i</em>2]=f[i]+1注意最后统计答案时应当为f[i]+abs(y-i)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">200009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("clever.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("clever.out","w",stdout);</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">==</span><span class="token number">65530</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"19"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token number">1000000000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">200000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">&lt;=</span><span class="token number">200000</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">200000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 模拟赛总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟赛总结 </tag>
            
            <tag> hgoi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 2 16 总结</title>
      <link href="/2019/02/21/2019-2-16-zong-jie/"/>
      <url>/2019/02/21/2019-2-16-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h4><p><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1g0992wlb6uj308b02i0sn.jpg" alt><br>找规律，得到规律<br><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1g09956ta3jj3095016mwy.jpg" alt><br>联立得<br><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1g0996lhcn6j30340120rr.jpg" alt><br>结束</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">31</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h4><p>每个人有四个数字，朋友的定义是两人至少有一个数字相同，求每个人与左边的人有几个朋友，数字&lt;=50<br>因为数字很小，直接开四维数组统计，根据小学奥数思想，最终答案应是calc1()-calc2()+calc3()-calc4() </p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot1<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tot2<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tot3<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tot4<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("friend.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("friend.out","w",stdout);</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token operator">+</span><span class="token operator">=</span>tot1<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ans<span class="token operator">-</span><span class="token operator">=</span>tot2<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>a1<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>a1<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a2<span class="token operator">=</span>a1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>a2<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>a2<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a3<span class="token operator">=</span>a2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>a3<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>a3<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    ans<span class="token operator">+</span><span class="token operator">=</span>tot3<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>a1<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>a2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>a3<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ans<span class="token operator">-</span><span class="token operator">=</span>tot4<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tot1<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                tot2<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>a1<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>a1<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a2<span class="token operator">=</span>a1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>a2<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>a2<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a3<span class="token operator">=</span>a2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>a3<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>a3<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    tot3<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>a1<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>a2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>a3<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        tot4<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>拓展：当k增大时，可以使用散列表进行统计  </p><h4 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h4><p>裸的背包，不说了</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">309</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">309</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1009</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("psolve.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("psolve.out","w",stdout);</span>    m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;ans&lt;&lt;endl;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> nowcost<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ntcost<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                nowcost<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>f<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>ntcost<span class="token operator">+</span><span class="token operator">=</span>b<span class="token punctuation">[</span>f<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nowcost<span class="token operator">&lt;=</span>i<span class="token operator">&amp;&amp;</span>ntcost<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//if(f[ans][i]+k>f[ans+1][m-ntcost]) cout&lt;&lt;ans+1&lt;&lt;" "&lt;&lt;m-ntcost&lt;&lt;" "&lt;&lt;f[ans][i]+k&lt;&lt;endl;</span>                    f<span class="token punctuation">[</span>ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">-</span>ntcost<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">-</span>ntcost<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>ans<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">-</span>ntcost<span class="token punctuation">]</span><span class="token operator">==</span>n<span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                       <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h4 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h4><p>给定一棵树，每个点都有权值，查询在根为k的情况下节点x的子树权值和<br>分块，将sqrt(n)作为块大小，将一块点看作一个点，这样的话查询就分为块内查询，块外查询，块内统计，块外统计四部分，代码很长，但很好想，而且该算法优点很大（拓展的时候讲）</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> blong<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>block<span class="token punctuation">,</span>lenblock<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>blockbh<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> fto<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>to<span class="token punctuation">[</span><span class="token number">200009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nt<span class="token punctuation">[</span><span class="token number">200009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bh<span class="token punctuation">;</span><span class="token keyword">int</span> bkhead<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bkto<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bknt<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bkfrom<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bknext<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bkbh<span class="token punctuation">;</span><span class="token keyword">int</span> val<span class="token punctuation">[</span><span class="token number">100009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> nowroot<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token keyword">bool</span> hasbkfinden<span class="token punctuation">,</span>hasfinden<span class="token punctuation">;</span><span class="token keyword">int</span> superx<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    bh<span class="token operator">++</span><span class="token punctuation">;</span>    nt<span class="token punctuation">[</span>bh<span class="token punctuation">]</span><span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>bh<span class="token punctuation">;</span>    to<span class="token punctuation">[</span>bh<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">bkadd</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    bkbh<span class="token operator">++</span><span class="token punctuation">;</span>    bknt<span class="token punctuation">[</span>bkbh<span class="token punctuation">]</span><span class="token operator">=</span>bkhead<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    bkhead<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>bkbh<span class="token punctuation">;</span>    bkto<span class="token punctuation">[</span>bkbh<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span>       bkfrom<span class="token punctuation">[</span>bkbh<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>    bknext<span class="token punctuation">[</span>bkbh<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lenblock<span class="token punctuation">[</span>blong<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span>block<span class="token punctuation">)</span> blockbh<span class="token operator">++</span><span class="token punctuation">;</span>    blong<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span>blockbh<span class="token punctuation">;</span>    lenblock<span class="token punctuation">[</span>blockbh<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span>blockbh<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>val<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fa<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">dfs2</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs3</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fa<span class="token operator">&amp;&amp;</span>blong<span class="token punctuation">[</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span>blong<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">bkadd</span><span class="token punctuation">(</span>blong<span class="token punctuation">[</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>blong<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">bkadd</span><span class="token punctuation">(</span>blong<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span>blong<span class="token punctuation">[</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>now<span class="token punctuation">,</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//cout&lt;&lt;now&lt;&lt;" "&lt;&lt;to[i]&lt;&lt;" %%%"&lt;&lt;endl;</span>            fto<span class="token punctuation">[</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>blong<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>            fto<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span>blong<span class="token punctuation">[</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">dfs3</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fa<span class="token punctuation">)</span> <span class="token function">dfs3</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">bkdfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span><span class="token punctuation">{</span>    ans<span class="token operator">+</span><span class="token operator">=</span>f<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>bkhead<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>bknt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bkto<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fa<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">bkdfs</span><span class="token punctuation">(</span>bkto<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//cout&lt;&lt;now&lt;&lt;" @@@"&lt;&lt;endl;</span>    ans<span class="token operator">+</span><span class="token operator">=</span>val<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fa<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>blong<span class="token punctuation">[</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span>blong<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//cout&lt;&lt;blong[to[i]]&lt;&lt;" "&lt;&lt;blong[now]&lt;&lt;" &amp;&amp;&amp;"&lt;&lt;endl;</span>                <span class="token function">bkdfs</span><span class="token punctuation">(</span>blong<span class="token punctuation">[</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>blong<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ffind</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hasfinden<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">==</span>k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        hasfinden<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span>fa<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>nt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fa<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>k<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                hasfinden<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//cout&lt;&lt;to[i]&lt;&lt;" "&lt;&lt;now&lt;&lt;" !!!"&lt;&lt;endl;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>            <span class="token function">ffind</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>now<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hasfinden<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">bkfind</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>bkhead<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>bknt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bkto<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>fa<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bkto<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>k<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//cout&lt;&lt;bknext[i]&lt;&lt;" "&lt;&lt;bkfrom[i]&lt;&lt;" "&lt;&lt;superx&lt;&lt;endl;</span>                hasbkfinden<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">ffind</span><span class="token punctuation">(</span>bknext<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>bkfrom<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>superx<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token function">bkfind</span><span class="token punctuation">(</span>bkto<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>now<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hasbkfinden<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("transform.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("transform.out","w",stdout);</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    block<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.6</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> u<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*for(int i=1;i&lt;=n;i++)    {        cout&lt;&lt;blong[i]&lt;&lt;" ";        }    cout&lt;&lt;endl;*/</span>    nowroot<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>opt<span class="token punctuation">,</span>x<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        opt<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        superx<span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nowroot<span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>               ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            hasbkfinden<span class="token operator">=</span>hasfinden<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>blong<span class="token punctuation">[</span>nowroot<span class="token punctuation">]</span><span class="token operator">!=</span>blong<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">bkfind</span><span class="token punctuation">(</span>blong<span class="token punctuation">[</span>nowroot<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>blong<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                <span class="token function">ffind</span><span class="token punctuation">(</span>nowroot<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>拓展：<br>1、增加区间修改权值<br>2、改变连边</p>]]></content>
      
      
      <categories>
          
          <category> 模拟赛总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟赛总结 </tag>
            
            <tag> hgoi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 2 17 总结</title>
      <link href="/2019/02/21/2019-2-17-zong-jie/"/>
      <url>/2019/02/21/2019-2-17-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h4><p>题意:给出n，求1到n内有几个数与n的最大公约数不为1（n&lt;=10000000）<br>直接分解质因数容斥即可</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">long</span> N<span class="token operator">=</span><span class="token number">10000000</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> check<span class="token punctuation">[</span>N<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token punctuation">[</span>N<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lenp<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">,</span>cnt<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> cs<span class="token punctuation">[</span>N<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lencs<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">_dfs</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> now<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> tot<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> ed<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> fs<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tot<span class="token operator">==</span>ed<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cnt<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">/</span>k<span class="token punctuation">)</span><span class="token operator">*</span>fs<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">==</span>lencs<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">_dfs</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">*</span>cs<span class="token punctuation">[</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tot<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>ed<span class="token punctuation">,</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_dfs</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>tot<span class="token punctuation">,</span>ed<span class="token punctuation">,</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">checkans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lencs<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>lencs<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">_dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token punctuation">(</span>k<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("million.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("million.out","w",stdout);</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>check<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p<span class="token punctuation">[</span><span class="token operator">++</span>lenp<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>lenp<span class="token operator">&amp;&amp;</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            check<span class="token punctuation">[</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>lenp<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cs<span class="token punctuation">[</span><span class="token operator">++</span>lencs<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">checkans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h4 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h4><p>题意：给定一个长度为n的序列，有m个操作如下（n,m&lt;=50000）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token number">1</span><span class="token punctuation">.</span>在选取一个区间【a，b】，并给出一个值k，区间上如果编号i 满足（i<span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">%</span> k <span class="token operator">=</span> <span class="token number">0</span> 就加上c。<span class="token punctuation">(</span>k<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>询问序列中某个数的当前值。</code></pre><p>分块（分块一时爽，一直分块一直爽）<br>操作一即对一个区间内对于k的余数为定值的一些数加上定值，由于k比较少，在查询时可以直接枚举关于每个k被加了几次<br>但是个一个数修改显然很慢，故将其分为两部分，一个是块内，一部分为块外<br>一个区间块外的点最多为sqrt（n）个，最多有sqrt(n)块，复杂度nsqrt(n)<br>查询时将块内贡献加上单点贡献加上基础值即可</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">50009</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> fb<span class="token punctuation">[</span><span class="token number">238</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>block<span class="token punctuation">,</span>blong<span class="token punctuation">[</span><span class="token number">50009</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> val<span class="token punctuation">[</span><span class="token number">50009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("tnt.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("tnt.out","w",stdout);</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    block<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        blong<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>blong<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>block<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> blong<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>opt<span class="token punctuation">,</span>a<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">,</span>ys<span class="token punctuation">,</span>c<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        opt<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            l<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ys<span class="token operator">=</span>l<span class="token operator">%</span>k<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">%</span>block<span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>ys<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>c<span class="token punctuation">;</span>                 l<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">%</span>block<span class="token operator">&amp;&amp;</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>ys<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>c<span class="token punctuation">;</span>                r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>blong<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>blong<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                fb<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>ys<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>c<span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            a<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token operator">=</span>val<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ans<span class="token operator">+</span><span class="token operator">=</span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token operator">%</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                ans<span class="token operator">+</span><span class="token operator">=</span>fb<span class="token punctuation">[</span>blong<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token operator">%</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h4 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h4><p>题意：有n个点和m条边。选出其中的某些边构成一个新的图（不一定联通），要求新图中每个连通块中至多有一个环。求新图的边权最大和。<br>贪心，做最大生成树，但保证每个联通快只能有一个环，再开一个数组维护即可<br>证明：若取最大边不是最优，则需要去一条最大边，但去掉一条最大边最多只能再加一边，故总答案减小，不是最优的</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">309</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> g<span class="token punctuation">[</span><span class="token number">309</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">;</span><span class="token keyword">struct</span> gzw<span class="token punctuation">{</span>    <span class="token keyword">int</span> st<span class="token punctuation">,</span>ed<span class="token punctuation">,</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span>way<span class="token punctuation">[</span><span class="token number">1000009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">rnk</span><span class="token punctuation">(</span>gzw a<span class="token punctuation">,</span>gzw b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>val<span class="token operator">></span>b<span class="token punctuation">.</span>val<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">==</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">?</span>x<span class="token operator">:</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("build.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("build.out","w",stdout);</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ed<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st<span class="token operator">++</span><span class="token punctuation">;</span>        way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ed<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>way<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>way<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>rnk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> u<span class="token operator">=</span>way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st<span class="token punctuation">,</span>v<span class="token operator">=</span>way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ed<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">!</span>g<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            g<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            ans<span class="token operator">+</span><span class="token operator">=</span>way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>g<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> ls<span class="token operator">=</span>g<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            g<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">|</span>ls<span class="token punctuation">;</span>            ans<span class="token operator">+</span><span class="token operator">=</span>way<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*for(int i=1;i&lt;=n;i++)        {            cout&lt;&lt;find(i)&lt;&lt;" ";        }        cout&lt;&lt;endl;        for(int i=1;i&lt;=n;i++)        {            cout&lt;&lt;g[find(i)]&lt;&lt;" ";        }        cout&lt;&lt;endl;*/</span>     <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 模拟赛总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟赛总结 </tag>
            
            <tag> hgoi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019.2.18总结</title>
      <link href="/2019/02/21/2019-2-18-zong-jie/"/>
      <url>/2019/02/21/2019-2-18-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>又是水题大赛和失误的一天</p><p>T1边界出错，二分打错</p><p>T4初始值赋错</p><p>没什么好讲的</p><p>T1上升子序列</p><p>T2spfa</p><p>T3单调队列</p><p>T4背包dp</p><p>题意</p><p>T1原序列将卡片拿出再放回几次才能有序？</p><p>T2走迷宫，有些地块需要更多体力问最少体力消耗</p><p>T3给定序列，求该点前m个数中的最小值</p><p>T4给定f,s值选取任意个物品使总和最大且f值和与s值和都不小于0</p><h4 id="A"><a href="#A" class="headerlink" title="A"></a>A</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token number">500009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lenq<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid<span class="token punctuation">,</span>re<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;" "&lt;&lt;re&lt;&lt;" 233"&lt;&lt;endl;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;=</span>k<span class="token punctuation">)</span> re<span class="token operator">=</span>mid<span class="token punctuation">,</span>l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> re<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("card.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("card.out","w",stdout);</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">2000000000</span><span class="token punctuation">;</span>        x<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span>q<span class="token punctuation">[</span>lenq<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token punctuation">[</span><span class="token operator">++</span>lenq<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            q<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>lenq<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>n<span class="token operator">-</span>lenq<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h4 id="B"><a href="#B" class="headerlink" title="B"></a>B</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> gzw<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span><span class="token number">509</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">509</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> mark<span class="token punctuation">[</span><span class="token number">509</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">509</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span><span class="token number">509</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">509</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> stx<span class="token punctuation">,</span>sty<span class="token punctuation">,</span>edx<span class="token punctuation">,</span>edy<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot<span class="token punctuation">[</span><span class="token number">509</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">509</span><span class="token punctuation">]</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span>gzw<span class="token operator">></span> q<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">true_calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>edx<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span>edy<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    T<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        mark<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        mark<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2000000000</span><span class="token punctuation">;</span>            mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span> stx<span class="token operator">=</span>i<span class="token punctuation">,</span>sty<span class="token operator">=</span>j<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">9</span><span class="token punctuation">)</span> edx<span class="token operator">=</span>i<span class="token punctuation">,</span>edy<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gzw<span class="token punctuation">)</span><span class="token punctuation">{</span>stx<span class="token punctuation">,</span>sty<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mark<span class="token punctuation">[</span>stx<span class="token punctuation">]</span><span class="token punctuation">[</span>sty<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    dis<span class="token punctuation">[</span>stx<span class="token punctuation">]</span><span class="token punctuation">[</span>sty<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        gzw now<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token operator">=</span>now<span class="token punctuation">.</span>x<span class="token punctuation">,</span>y<span class="token operator">=</span>now<span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>dis<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dis<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mark<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gzw<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mark<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>x<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>dis<span class="token punctuation">[</span>x<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dis<span class="token punctuation">[</span>x<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>x<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mark<span class="token punctuation">[</span>x<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gzw<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mark<span class="token punctuation">[</span>x<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mark<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gzw<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mark<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mark<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gzw<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mark<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        mark<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>T<span class="token operator">-</span>dis<span class="token punctuation">[</span>edx<span class="token punctuation">]</span><span class="token punctuation">[</span>edy<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">(</span>T<span class="token operator">-</span>dis<span class="token punctuation">[</span>edx<span class="token punctuation">]</span><span class="token punctuation">[</span>edy<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> gzw<span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">,</span>pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span>q<span class="token punctuation">[</span><span class="token number">1000009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>tail<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("min.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("min.out","w",stdout);</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">&lt;=</span>tail<span class="token operator">&amp;&amp;</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token operator">+</span>m<span class="token operator">&lt;</span>i<span class="token punctuation">)</span> head<span class="token operator">++</span><span class="token punctuation">;</span>        x<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">&lt;=</span>tail<span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span> tail<span class="token operator">--</span><span class="token punctuation">;</span>        q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>gzw<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>i<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h4 id="D"><a href="#D" class="headerlink" title="D"></a>D</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">!=</span><span class="token string">'-'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span> fs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span>fs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">200009</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ff<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("smrtfun.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("smrtfun.out","w",stdout);</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">200000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">200000000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">200000</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>ff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>ff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">100000</span><span class="token operator">&amp;&amp;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>j<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">100000</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 模拟赛总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟赛总结 </tag>
            
            <tag> hgoi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2019/02/21/hello-world/"/>
      <url>/2019/02/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>本博客建于2019 2 21<br>主要更新题解和算法学习笔记<br>欢迎交换友链！</p>]]></content>
      
      
      <categories>
          
          <category> 生活记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂七杂八的 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
